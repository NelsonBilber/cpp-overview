#+TITLE: C++ Template/Metaprogramming
#+AUTHOR: Nelson Rodrigues

 

A very powerful programming technique. The follow examples explain how to use on functions and classes 

** Functions
- Arguments Deduction [[https://github.com/NelsonBilber/cpp.templates.functions.1.arguments.deduction][Source Code]]
- Explicit Specialization [[https://github.com/NelsonBilber/cpp.templates.functions.2.explicit.specialization][Source Code]]
- Non-Type Arguments [[https://github.com/NelsonBilber/cpp.templates.functions.3.non-type.arguments][Source Code]]
- Variadic Templates [[https://github.com/NelsonBilber/cpp.templates.functions.4.variadic.templates][Source Code]]
** Classes
- Basics [[https://github.com/NelsonBilber/cpp.templates.class1.basic][Source Code]]
- Explicit Specialization [[https://github.com/NelsonBilber/cpp.templates.class1.basic][Source Code]]
- Partial Specialization [[https://github.com/NelsonBilber/cpp.templates.class3.partial.specialization][Source Code]]
- Alias [[https://github.com/NelsonBilber/cpp.templates.class4.typealias][Source Code]]

** Template Patterns

- Tag Dispatching [[https://github.com/NelsonBilber/cpp.tag-dispatching][Source Code]]
- C++ Curiously recurring template pattern [[https://github.com/NelsonBilber/cpp.crtp.template.pattern][Source Code]] 

**  since C++20 

- concepts [[https://https://github.com/NelsonBilber/cpp-overview/blob/master/docs/concepts.org][more ...]]



**** Reference

[[http://www.stroustrup.com/good_concepts.pdf][Concepts: The Future of Generic Programming]]

