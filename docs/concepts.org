* Concepts ( since C++20 )

Concepts were idealized to simply generic programming. To design some constraints to a generic type, code star to became difficult to read and hard to maintain. 

"So *concepts* are boolean predicates that are valid constant-expressions. A concept is a set of requirements on a set of template arguments"

from book : " C++ Templates: The Complete Guide 2.0"

#+begin_src C++

#include <iostream>

template <typename T>
concept bool Equal(){
    return requires ( T a, T b)
    {
        {a == b} -> bool;
        {a != b} -> bool;
    };
}

// Use of concepts !!
bool areEqual( Equal a, Equal b)
{
    return a == b;
}

int main()
{
    std::cout << std::boolalpha << std::endl;  
    std::cout << "areEqual(1, 5): " << areEqual(1, 5) << std::endl;
    std::cout << "areEqual(2, 2): " << areEqual(2, 2) << std::endl;
    std::cout << std::endl;
    
    return 0;
}

#+end_src

Source code from : [[http://www.modernescpp.com/index.php/component/content/article/42-blog/functional/288-defintion-of-concepts?Itemid=239#h1-two-forms][ModernsCpp - two forms]]
